{
	"title":"Xtreme Test Driven",
	"slidesid":"Tests",
	"author":"S. Ducasse"
}


${slide:title=Outline}$

- TDD on steroids
- Live programming
- Smart tools
- Absolutely gorgeous development flow

+ >file://figures/LogoPharo.png|width=30+

${slide:title=Principle}$

- Do ""not break"" the flow
- Write a test
- When it breaks, define the method ""on the fly in the debugger""
- Resume and continue until test is green

${slide:title=Studying an example}$

- A dead simple counter. Nothing simpler.
- Focus on essence of the process!
- You can do it.


${slide:title=An Empty Package}$

+ >file://figures/XTDD1.png|width=95+



${slide:title=An Empty Test Case Class}$

+ >file://figures/XTDD2.png|width=100+


${slide:title=A first test}$

+ >file://figures/XTDD3.png|width=90+

${slide:title=A first test}$

+ >file://figures/XTDD3.png|width=60+

- Method is about to be compiled 
- The system knows the class does not exist!


${slide:title=Define a class}$

- At compile time...
+ >file://figures/XTDD4.png|width=60+


${slide:title=Define a class (II)}$

+ >file://figures/XTDD5.png|width=90+


${slide:title=Test Defined but Not Executed}$

+ >file://figures/XTDD6.png|width=90+


${slide:title=Running the test}$

+ >file://figures/XTDD7.png|width=90+

${slide:title=First Error}$

+ >file://figures/XTDD8.png|width=80+

- Of course, we did not define any method, yet!

${slide:title=Create a method on the fly}$

+ >file://figures/XTDD9.png|width=90+

${slide:title=Create a method on the fly (II)}$

+ >file://figures/XTDD10.png|width=90+

${slide:title=Edit the method in the debugger (III)}$

+ >file://figures/XTDD11.png|width=80+

- But there is no instance variable!
- So what?

${slide:title=Add an instance variable on the fly}$

+ >file://figures/XTDD12.png|width=80+

${slide:title=Compile....}$

+ >file://figures/XTDD13.png|width=100+

${slide:title=Continue the execution...}$

+ >file://figures/XTDD14.png|width=80+

${slide:title=Stepping back}$

- The system created a new method
- Removed the stack element with Error
- Replace it with a call to the new method
- Relaunched execution
- We edited it and recompiled
- Continued execution

${slide:title=Stepping back (II)}$

- The system created a new method

- Removed the stack element with Error
- Replace it with a ""call"" to the new method

[[[
count: anInteger
	self shouldBeImplemented
]]]

- ==shouldBeImplemented== is just an exception so that the debugger stops again


${slide:title=Same story....}$

+ >file://figures/XTDD15.png|width=90+

${slide:title=Smart tools precompile methods}$

+ >file://figures/XTDD16.png|width=70+

- A method with the same name than an attribute...
- Probably an accessor

${slide:title=Test is green}$

+ >file://figures/XTDD17.png|width=90+

${slide:title=One Cycle}$

- Run all the tests
- Ready to commit
- New test

${slide:title=Stepping back}$

- Avoid guessing when coding
- Much much better context 
-- inspect that specific instance state
-- talk to that specific object
- Inspectable / interactable context
- Tests are not a side effect artefacts but the driving force

${slide:title=Protip from expert Pharo developers}$

- Get as fast as possible one object
- Cristalize your scenario with a test
- Xtreme TDD
- Loop

