{
    "title" : "Stone Paper Scissors",
    "slidesid" : "From the Design Corner",
    "author" : "StÃ©phane Ducasse"
}

${slide:title=Objectives}$

- Another look at double dispatch
- Basis for Visitor Design pattern
- Avoid hardcoding conditionals

[[[
(Stone new play: Paper new)
>>> #paper
]]]


${slide:title=Stone Paper Scissors via Tests}$

[[[
StonePaperScissorsTest >> testPaperIsWinning
	self assert: (Stone new play: Paper new) equals: #paper
]]]

${slide:title=Stone Paper Scissors via Tests}$

[[[
StonePaperScissorsTest >> testPaperIsWinning
	self assert: (Stone new play: Paper new) equals: #paper
]]]

[[[
StonePaperScissorsTest >> testStoneAgainsStone
	self assert: (Stone new play: Stone new) equals: #draw
]]]

[[[
StonePaperScissorsTest >> testStoneIsWinning
	self assert: (Stone new play: Scissors new) equals: #stone
]]]


${slide:title=Let us start}$

[[[
StonePaperScissorsTest >> testPaperIsWinning
	self assert: (Stone new play: Paper new) equals: #paper
]]]

[[[
Stone >> play: anotherTool
	^ ...
]]]

${slide:title= Paper playAgainstStone: }$

[[[
StonePaperScissorsTest >> testPaperIsWinning
	self assert: (Stone new play: Paper new) equals: #paper
]]]

[[[
Stone >> play: anotherTool
	^ anotherTool playAgainstStone: self
]]]

[[[
Paper >> playAgainstStone: aStone
	...
]]]

${slide:title= Paper playAgainstStone: }$

[[[
StonePaperScissorsTest >> testPaperIsWinning
	self assert: (Stone new play: Paper new) equals: #paper
]]]

[[[
Stone >> play: anotherTool
	^ anotherTool playAgainstStone: self
]]]

[[[
Paper >> playAgainstStone: aStone
	^ #paper
]]]



${slide:title=Other playAgainstStone: }$

[[[
Scissors >> playAgainstStone: aStone
	^ #stone
]]]

[[[
Stone >> playAgainstStone: aStone
	^ #draw
]]]


${slide:title=Scissors now }$

[[[
StonePaperScissorsTest >> testScissorsIsWinning
	self assert: (Scissors new play: Paper new) = #scissors
]]]

[[[
Scissors >> play: anotherTool
	^ anotherTool playAgainstScissors: self
]]]

[[[
Scissors >> playAganstScissors: aScissors
	^ #draw
]]]

[[[
Paper >> playAgainstScissors: aScissors
	^ #scissors
]]]

[[[
Stone >> playAgainstScissors: aScissors
	^ #stone
]]]

${slide:title=Paper now }$
[[[
Paper >> play: anotherTool
	^ anotherTool playAgainstPaper: self
]]]

[[[
Scissors >> playAgainstPaper: aPaper
	^ #scissors
]]]

[[[
Paper >> playAgainstPaper: aPaper
	^ #draw
]]]

[[[
Stone >> playAgainstPaper: aPaper
	^ #paper
]]]

${slide:title=Overview}$

+An overview of a possible solution using double dispatch.>file://figures/StonePaperScissors.pdf|width=80+

${slide:title=Remark}$

In this example we do not need to pass the argument during the double dispatch

[[[
Scissors >> playAgainstPaper: aPaper
	^ #scissors
]]]

[[[
Scissors >> playAgainstPaper
	^ #scissors
]]]

${slide:title=Thinking more...}$

When we return a token or a number we should check to do something after.
So passing blocks may be better.

[[[
Paper new competeWith: Paper new
	onDraw: [ Game incrementDraw ]
	onReceiverWin: [ ]
	onReceiverLose: [ ]
]]]

${slide:title=Conclusion}$

- Powerful
- Modular
- Just sending an extra message to an argument and using late binding
