{
    "title":"Singleton",
    "slidesid":"From the Design Corner"
}


${slide:title=Outline}$

- Singleton
- Singleton discussions
- Singleton misunderstanding


${slide:title=Singleton intent}$

From the book: 'Ensure that a class has only one instance, and provide a global point of access to it'

Better: Ensure that a class has only one instance available at the same time

${slide:title=Problem/Solution}$

- ""Problem:"" We want a class with a unique instance.
- ""Solution:""  Store the first time an instance is created and return it each time a new instance is requested. 

${slide:title=Example}$

[[[
db := DBConnect default.
db2 := DBConnect default.

db2 == db2
> true
]]]

Yes we get only one instance of the database connection

${slide:title=Possible implementation}$

[[[
Object subclass: #BDConnect
	instanceVariableNames: ''
	classVariableNames: 'UniqueInstance'
]]]

[[[
BDConnect class >> uniqueInstance 
	UniqueInstance isNil 
	      ifTrue: [ UniqueInstance := self basicNew initialize].
	^ UniqueInstance
]]]

${slide:title=Kinds of Singleton}$

- ""Persistent Singleton"": only one instance exists and its identity does not change 

- ""Transient Singleton"": only one instance exists at any time, but that instance changes  

- ""Single Active Instance Singleton"": a single instance is active at any point in time, but other dormant instances may also exist. 

${slide:title=Implementation discussion}$

- Even if the language supports global variables avoid to store a Singleton in a global.

- A class is already acting as a global and it can manages the Singleton (one single entry point)

${slide:title=Implementation discussion}$

- Even if the language supports global variables avoid to store a Singleton in a global.

- A class is already acting as a global and it can manages the Singleton (one single entry point)

${slide:title=Class Variable vs Class instance variable}$

When language offers class as objects.

Static / classVariable (shared variable)
- One singleton for a complete hierarchy

Class instance variable
- One singleton per class
- Each subclass has its own singleton


${slide:title=About name}$

[[[
DBConnect class >> new
	^ self uniqueInstance
]]]

- The intent (uniqueness) is not clear anymore! 
- new is normally used to return newly created instances.
- Not intention revealing
- new potentially means to 
-- (re)initialize the object
-- get a new object
- uniqueInstance don't

${slide:title=About name 2}$

""uniqueInstance""
- Pure singleton ensuring a single global instance.
- When implementing this variation, #new should be blocked.

[[[
Author class>>uniqueInstance
	^ uniqueInstance ifNil: [ uniqueInstance := self basicNew initialize ]
Author class>>new
	self error: 'Author is a singleton -- send uniqueInstance instead'
]]]

""default""
- some meaningful default instance, but there is no reason to bar the user from creating more instances.

""current""
- to keep the same instance system-wide, but we also want to change it under some circumstances.

${slide:title=Singleton misunderstanding}$

- Singleton is about time: one instance available at the same time

- Singleton is not about access: don't use a singleton because it is easier to access one instance!

${slide:title=Singleton misunderstanding}$

If you can add one instance variable to your object and suddenly you do not need a singleton then it was not a singleton but an ugly disguised global variable!


${slide:title=Conclusion}$

- Having only one instance at a time
- Avoid Singleton as a global 


