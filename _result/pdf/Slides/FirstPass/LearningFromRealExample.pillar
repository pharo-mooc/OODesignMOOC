{
    "title":"Learning From Real Examples",
    "slidesid":"From the Design Corner"
}


${slide:title=Studying a Sokoban Implementation}$

+.>file://figures/LearnFEx-Sokoban1.png|width=100+
 

${slide:title=Good decomposition}$

- Model 
- Views
- Controllers

${slide:title=Model}$

%+.>file://figures/LearnFEx-Model.png|width=50+

- Block
-- EmptyBlock
-- Wall
- GameModel
- GameState
- Maze
- MazeTemplate
- MoveResult
-- Move
--- Push
-- NoMove

We will come back later...

${slide:title=Views}$

+.>file://figures/LearnFEx-View.png|width=50+

${slide:title=Controllers}$

+.>file://figures/LearnFEx-Controllers.png|width=50+

${slide:title=Let us guess about the model}$

${columns}$

${column:width=60}$

- Wall
- Floor
- Box
- Robot
- Target
- Board

${column:width=40}$

+.>file://figures/LearnFEx-Sokoban1.png|width=120+

${endColumns}$


${slide:title=Let us guess about the model}$

${columns}$

${column:width=60}$

- Wall
- Floor
- Box
- Robot
- Target
- Board
Instead we got 
- Block
-- EmptyBlock
-- Wall

Let us study that...

${column:width=40}$

+.>file://figures/LearnFEx-Sokoban1.png|width=120+

${endColumns}$


${slide:title=Let us check the class API}$

- isEmptyBlock
- isWall
Let us check the way this API is used

${slide:title=Too many ifs....}$

[[[
GameView >> drawBlock: aBlock on: aCanvas
	(aBlock isWall) ifTrue: [ self drawWall: aCanvas ].
	(aBlock isEmptyBlock) ifTrue: [ 
		(aBlock hasPlayer) ifTrue: [ 
			(aBlock hasTarget) ifTrue: [ self drawTargetAndPlayer: aCanvas ].
			(aBlock hasTarget) ifFalse: [ self drawPlayer: aCanvas ]].
		(aBlock hasPlayer) ifFalse: [ 
			(aBlock hasBox) ifTrue: [ 
				(aBlock hasTarget) ifTrue: [ self drawTargetAndBox: aCanvas ].
				(aBlock hasTarget) ifFalse: [ self drawBox: aCanvas ] ].
			(aBlock hasBox) ifFalse: [ 
					(aBlock hasTarget) ifTrue: [ self drawTarget: aCanvas ].
					(aBlock hasTarget) ifFalse: [ self drawEmptyBlock: aCanvas ] ].
	]
]]]

${slide:title=Why?}$

Because the model only defines
- EmptyBlock and 
- Wall

No Player, no target, no box.

Too much logic is put in EmptyBlock

${slide:title=A better model}$	

%+.>file://figures/LearnFEx-Model2.png|width=100+

- Block
-- Box
-- BoxOnTarget
-- EmptyBlock
-- Player
-- PlayerOnTarget
-- Wall


${slide:title=A possible solution}$	

[[[
GameView >> drawBlock: aBlock on: aCanvas
	(aBlock isWall) ifTrue: [ self drawWall: aCanvas ].
	(aBlock isEmptyBlock) ifTrue: [ 
	...
]]]

Becomes

[[[
GameView >> drawBlock: aBlock on: aCanvas
	aBlock drawOn: aCanvas view: self

Wall >> drawOn: aCanvas view: aView
	aView drawWall: aCanvas

EmptyBlock >> drawOn: aCanvas view: aView
	aView drawEmptyBlock: aCanvas
]]]


${slide:title=Back to the model}$

What are:
- MoveResult
-- Move
--- Push
-- NoMove

Kind of Command objects
Good to support Undo

${slide:title=Let us study the API}$

[[[
MoveResult >> isMove
	^ false
MoveResult >> isPush
	^ false
MoveResult >> isNoMove
]]]

[[[
GameState >> moveBy: aDirection
	| moveResult |
	moveResult := maze moveBy: aDirection.
	(moveResult isMove) ifTrue: [ moves := moves + 1 ].
	(moveResult isPush) ifTrue: [ 
		pushes := pushes + 1.
		moves := moves + 1 ].
	self addMoveResult: moveResult.
]]]

${slide:title=Do not ask tell}$

[[[
GameState >> moveBy: aDirection
	| moveResult |
	moveResult := maze moveBy: aDirection.
	moveResult doWithGameState: self.	
	self addMoveResult: moveResult.

Move >> doWithGameState: aGameState
	aGameState incrementMoves

Push >> doWithGameState: aGameState
	super doWithGameState: aGameState.
	aGameState increasePushes

NoMove >> doWithGameState: aGameState 
	self 
]]]

${slide:title=Conclusion}$

- Messages act as a dispatcher
- Avoid conditional when possible


