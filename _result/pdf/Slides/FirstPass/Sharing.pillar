{
    "title":"Sharing with Instance Specific Possibilities",
    "slidesid":"From the Design Corner"
}


${slide:title=Goal}$

- Thinking about sharing
- How can we share by default a ressource and still get instance-based use possible?


${slide:title=Tracks of solution}$

- Instance variables (most of the time) hold instance specific values
- Static / classvariable hold values that are shared among all instances

${slide:title=What do you propose?}$

...

${slide:title=Case Study: Scanner}$

[[[
Scanner new
	scanTokens: 'identifier keyword: 25 embedded.period key:word: . '
>
	#(#identifier #keyword: 25 'string' 'embedded.period' #key:word: #'.')
]]]

${slide:title=The Scanner class}$

[[[
Object subclass: #Scanner
	instanceVariableNames: 'source mark prevEnd hereChar token tokenType saveComments
	currentComment buffer typeTable ' 
	classVariableNames: 'TypeTable '
]]]

What? a bug!

${slide:title=Scanner class enigma}$

Why having an instance variable and a classVariable pointing the same object (the scanner table)?

${slide:title=Further investigation}$

- TypeTable is used to initialize ""once"" the table 
- typeTable is used by every instance method
- All methods only access the instance variable and never the shared one

Does it ring a bell?

${slide:title=Sharing by default / instance based possible}$

+.>file://figures/Sharing.pdf|width=60+



${slide:title=Shared variable points to the share table}$

[[[
Scanner class >> initialize 
	| newTable |
	newTable := ScannerTable new: 255 withAll: #xDefault. "default" newTable atAllSeparatorsPut: #xDelimiter.
	newTable atAllDigitsPut: #xDigit.
	newTable atAllLettersPut: #xLetter.
	'!%&*+,-/<=>?@\~' do: [:bin | newTable at: bin asInteger put: #xBinary]. "Other multi-character tokens"
	newTable at: $( asInteger put: #leftParenthesis.
	newTable at: $^ asInteger put: #upArrow....
	TypeTable := newTable
]]]



${slide:title=And...}$

Instances only access the type table via the instance variable that points to the shared table that has been initialized once.
[[[
Scanner class >> new
	^ super new initScanner

Scanner >> initScanner
	buffer := WriteStream on: (String new: 40). saveComments := true.
	typeTable := TypeTable
]]]

${slide:title=One instance specific state}$

[[[
	Scanner new setTypeTable: (Scanner defaultTypeTable copy) andHack
]]]

A subclass has just to specialize ==initScanner== without copying the initialization of the table

[[[
MyScanner >> initScanner 
	super initScanner.
	typeTable := typeTable copy.
]]]



${slide:title=Conclusion}$

You can provide shared by default but let specific instance customize if they need it.





