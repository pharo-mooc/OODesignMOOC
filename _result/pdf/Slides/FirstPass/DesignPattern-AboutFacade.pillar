{
    "title":"About Facade",
    "slidesid":"From the Design Corner"
}


${slide:title=Outline}$

- Facade
- Avoid it 
- Visitor variations


${slide:title=Facade intent}$

A facade is an object that provides a simplified interface to a larger body of code, such as a class library.

${slide:title="Expected" consequences}$

 A facade can:
- make a software library easier to use, understand and test, since the facade has convenient methods for common tasks;
- make the library more readable, for the same reason;
- reduce dependencies of outside code on the inner workings of a library, since most code uses the facade, thus allowing more flexibility in developing the system;
- wrap a poorly designed collection of APIs with a single well-designed API.


${slide:title=Seen consequences}$

Often people do not use Facade well
- Procedural design
-- all the clients refers to a single point: often a singleton
- Hampering modularity
-- Difficult to layer application 
-- Difficulty to unload the Facade

${slide:title=Studying Preferences Facade}$

+.>file://figures/DP-AboutFacade-Plague.pdf|width=45+

- Control flow is not local
- 180 system wide preferences 
- Impossible to remove Preferences packages
- Preferences link to too many package (default PngReader)

${slide:title=Solution for preferences}$

+.>file://figures/DP-AboutFacade-modularflow.pdf|width=65+

- Each element defines its preferences
- The flow is local to the element
- The local preferences are described
- Layered architecture: we can remove Preferences 


${slide:title=Conclusion}$

- Facade may work 
- Usually this is a plague


