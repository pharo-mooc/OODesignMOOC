{
    "title" : "The Two Interfaces in OOP",
    "slidesid" : "From the Design Corner",
    "author" : "StÃ©phane Ducasse"
}

${slide:title=Outline}$
- Some questions
- Two different clients!

${slide:title=What are the consequences of}$

[[[
A 
{ private x ;
void foo(){ ... x ...}
}
]]]

${slide:title=Consequences}$

- Cannot access x from clients
- Cannot replace x by something else
- Cannot extend from subclasses

Cannot even copy and paste the body of foo(){ ...} in subclasses to extend it manually!

${slide:title=Clients?}$

What are the clients of a class?
- Its users (e.g., Person is client of Address)
- But also its ""subclasses""

${slide:title=What do you think about this}$

Some tutorials mention: Fields should be private 

${slide:title=You cannot predict the future}$

- You are not the Kwisatz Haderach (Yes Dune)!
- You cannot predict how your classes MUST be extended in 5 years from now!
- Think about your extenders!
- No final no private, use protected (in CSharp and CPP)!

${slide:title=The correct idiom is...}$

- Fields should be private AND class should provide protected accessors
- OR
- Fields should be protected
- Favor protected

${slide:title=Benefits}$

- Your clients cannot access your fields
- And your subclasses are empowered
-- A subclass can extend/refine the behavior of the superclass

+.>file://figures/DualInterfaces2.png|width=50+

${slide:title=OOP is about encapsulation AND extension}$

A class has always two clients:
- Its users 
- Its extenders

Remember: ""Late binding"" is the core of OOP


