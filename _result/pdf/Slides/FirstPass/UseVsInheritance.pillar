{
    "title":"Use vs. Inheritance",
    "slidesid":"From the Design Corner"
}


${slide:title=Outline}$

- An exercise
- Some criteria
- Solutions
- Comparing solutions
 

${slide:title=Exercise Setting Up}$

Imagine ==TextEditor== and  several algorithms
- ==formatWithTex (t)==
- ==formatFastColoring (t)==
- ==formatSlowButPreciseColoring (t)== 

How can we create an editor that will format differently texts?

${slide:title=Next step}$
- Propose one solution
- Propose different solutions
- Define some criteria
- Compare the approaches using such criteria


${slide:title=Inheritance}$

[[[
TextEditor subclass: #SlowFormatingTextEditor

SlowFormatingTextEditor >> format
	 self formatSlowButPreciseColoring: text 
]]]

[[[
TextEditor subclass: #FastFormatingTextEditor

FastFormatingTextEditor >> format
	 self formatFastColoring: text 
]]]


[[[
TextEditor subclass: #NullFormatingTextEditor

NullFormatingTextEditor >> format
	^ self "do nothing" 
]]]


${slide:title=Inheritance}$

+.>file://figures/textEditorHierarchy.pdf|width=100+


${slide:title=With conditionals}$

+.>file://figures/textEditorSingle.pdf|width=60+

[[[
TextEditor >> format
	currentSelection = #slow
		ifTrue: [ self formatSlowButPreciseColoring: text] 
		ifFalse: [ currentSelection = #fast
			ifTrue: [self formatFastColoring: text] 
			....]
]]]


${slide:title=Alternate with Registry and Meta Programmation}$

[[[
Object subclass: #TextEditor 
	currentSelection formatters text
]]]

[[[
TextEditor class >> initialize
	self formatters 
		at: #slow put: #slowFormat: ; 
		at: #fast put: #fastFormat: ; 
		at: #null put: #nullFormat: ;
		at: #tex put: #texFormat:
]]]

[[[
TextEditor >> format
	self perform: (formatters at: currentSelection) with: text
]]]

${slide:title=Criteria}$

- Yes what are they?

${slide:title=Criteria}$

- ""Adding a new formatting algo"" - what is the cost to define a new formatting algorithm
- ""Dynamically use a formatter"" - can I switch dynamically to a new formatting algorithm
- ""Packaging"" - can I deploy a new formatting algorithm separately from others


${slide:title=Inheritance?}$

""Addition:""
- we can add a new formatter
""Packaging: ""
- we can package a new formatter

""Not the best solution since:""
- you have to create objects of the right class
- it is difficult to change the policy at run-time.
-- we do not want to have and reopen the texteditor

${slide:title=Inheritance?}$

You can get an explosion of classes bloated with the use of a functionality and the functionalities.
-- we do not want a hierarchy for each text editor features to be ""multiplied"" with previous ones
-- FastColoring
- API of TextEditor can get large: no clear identification of responsibility

+.>file://figures/textEditorHierarchyBloated.pdf|width=60+

${slide:title=Conditionals}$

""Dynamic use:"" we can use a different formatter dynamically.

But 
""Addition:""
- adding a version requires to edit and ""recompile"" the conditionals
""Packaging: ""
- we cannot package a new algorithm separately


${slide:title=Delegating to a formatter}$

+.>file://figures/colorizer.pdf|width=90+

[[[
myEditor formatter: FastFormatter new. 
myEditor format.
myEditor formatter: SlowFormatter new.
]]]

${slide:title=Delegating to a formatter}$

""Dynamic use:"" 
- we can use a different formatter dynamically. Just create a new instance and set it.
""Addition:""
- adding a version is just adding a new class
""Packaging: ""
- we package a new algorithm separately 


${slide:title=Strategy Design Pattern}$

- Uniformize the communication (API) between the Editor and the Formatter
-- all formatters should understand ==format:==
- Modular
- Incremental

${slide:title=There is nothing like a free lunch}$

- The formatter should access the state (i.e. the text, positions... contained in the text editor)
- Information should flow between the textEditor and the formatter
- API of textEditor should be opened to support it


${slide:title=Conclusion}$

Inheritance
- is about incremental static definition
- It can lead of static design
- It can help 
-- build dynamic solutions
-- structure abstractions

Delegation 
- can bring runtime flexibility



