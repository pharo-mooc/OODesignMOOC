{
    "title":"Composite",
    "slidesid":"From the Design Corner"
}


${slide:title=Outline}$

- Composite
- Composite discussions


${slide:title=Composite intent}$

- Compose objects into tree structures to represent part-whole hierarchies.  

- Composite lets clients treat individual objects and compositions of objects uniformly

${slide:title=Composite design essence}$

+.>file://figures/DP-CompositeEssence.pdf|width=80+

${slide:title=Composite motivation}$

A tree is a 
- leave 
- a node with trees as childen

${slide:title=Composite motivation}$

A book is composed of 
- title
- table of contents
- chapters
A chaper is composed of 
- sections
- paragraph
- lists

${slide:title=Composite motivation}$

A diagram is composed of elements

An element can be 
- a circle
- a segment
- a text
- a group of elements

+.>file://figures/DP-CompositeParticipants.pdf|width=40+


${slide:title=Composite participants: Client}$

+.>file://figures/DP-CompositeParticipants.pdf|width=70+

""Client""
- manipulates objects in the composition through the ""Component"" interface


${slide:title=Composite participants: Component}$

+.>file://figures/DP-CompositeParticipants.pdf|width=70+


""Component"" (Graphic)
- declares the interface for objects in the composition
- may implement default behavior for common interfaces
- declares an interface for accessing and managing its child components


${slide:title=Composite participants: Leaf}$

+.>file://figures/DP-CompositeParticipants.pdf|width=70+


""Leaf"" (Circle, Segment, Text, ...)
- represents leaf objects in the composition.  A leaf has no children
- defines behavior for primitive objects in the composition


${slide:title=Composite participants: Composite}$

+.>file://figures/DP-CompositeParticipants.pdf|width=70+

""Composite"" (Group)
- defines behaviour for components having children
- stores child components
- implements child-related operations in the Component interface

${slide:title=Collaborations}$

- Clients use the Component class interface to interact with objects in the composite structure. 
- Leaves handle requests directly. 
- Composites forward requests to its child components

${slide:title=Composite consequences}$

- Defines class hierarchies consisting of primitive and composite objects.
- Makes the client simple.  Composite and leaves objects are treated uniformly.
- Eases the creation of new kinds of components
- Can make your design general

${slide:title=Alternate extreme implementation}$

- Remember a Design Pattern is a name + intent
- It can have multiple implementations

+.>file://figures/DP-compositeEssenceAlternate.pdf|width=70+

${slide:title=Queries as composite}$

Be able to specify different queries over a repository

[[[
q1 := PropertyQuery property: #HNL with: #< value: 4.
q2 := PropertyQuery property: #NOM with: #> value: 10.
q3 := MatchName match: '*figure*'
]]]

Compose these queries and treat composite queries as one query

[[[
AndComposeQuery on: {q1 . q2 . q3}
]]]

${slide:title=Queries as composite possible design}$

+.>file://figures/DP-Composite.pdf|width=80+

${slide:title=In a dynamically-typed language}$

- Composite not only groups leaves but can also contain composites

- In addition add:, remove: do not need to be declared into Component but only on Composite. This way we avoid to have to define dummy behavior for Leaf

${slide:title=In a dynamically-typed languages}$

- Can Composite contain any type of child? (domain issues)
- Is the Compositeâ€™s number of children limited? 
- Forward/Delegation
-- ''Simple forward''. Send the message to all the children and merge the results without performing any other behavior
-- ''Selective forward''. Conditionally forward to some children
-- ''Extended forward''. Extra behavior
-- ''Override''. Instead of delegating

${slide:title=Working well with }$

""Composite and Visitors:"" Visitors walk on structured recursive objects: composites

""Composite and Factories"" Factories can create composite elements

${slide:title=Conclusion}$

- Composite is a natural way of composing
- Composite provide uniform API
- Basis for complex treatment expressed as Visitor
