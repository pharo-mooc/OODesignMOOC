{
  "title":"Late Bound Class Methods At Work"
}

${slide:title=What You Will Learn}$

- When a language offers class methods as plain normal late bound methods, class methods are really powerful
- Most class methods create new instances
-- but they can be used for other things such as registration mechanisms

${slide:title=Late-Bound Class Methods}$

In languages such Pharo class methods 
- are not static
- are plain virtual methods whose receiver are just classes (objects too)
- are selected at runtime
- this/self is dynamically bound to the receiver (a class)

${slide:title=Parsing Lines}$

Imagine we want to parse
[[[
!Section Title
- list item
-- subitem

Any text here
]]]


${slide:title=A Possible Design}$

+>file://figures/items.png|width=80+

- Document item ""classes"" know
-- if they can parse a line (==canParse:==)
-- how to create instances (==newFromLine:==)

${slide:title=Parsing Lines}$

+>file://figures/items.png|width=55+

[[[
Parser >> documentClasses
   ^ DocumentItem allSubclasses sorted: [ :cls1 :cls2 | cls1 priority < cls2 priority ]

Parser >> parse: line
   self documentClasses detect: [ :subclass |
         (subclass canParse: aLine)
            ifTrue: [ ^ subclass newFromLine: line ] ]
]]]


${slide:title=In Java}$

- ""Problem1"": you can’t call static methods polymorphically
-- static methods are not late-bound
- Common solution is to duplicate hierarchy with so-called factories

${slide:title=Factories}$

+>file://figures/ClassAsObject-items-and-factories.pdf|width=60+



${slide:title=In Java}$

- ""Problem 2"": you can’t get the list of factories dynamically
- Solution: Building the list of factories statically
[[[
public List sortedParsers() {
   List p = new ArrayList();

   p.add(new TextFactory());
   p.add(new ListItemFactory());
   p.add(new SectionTitleFactory());

   Collections.sort(p, new Comparator<DocumentItemFactory>() {
      int compare(DocumentItemFactory o1, DocumentItemFactory o2) {
        return Integer.compare(o1.priority(), o2.priority());
      }});
   return p;
}
]]]


${slide:title=How to keep the factory...}$

- You probably realized you want Singletons for the factories
- Now the design just gets more complex for not much more functionalities


${slide:title=The Command-Line Handler}$

- the Pharo command-line interface (CLI) uses the same approach
- each subclass of ==CommandLineHandler== knows how to deal with one command
- the correct subclass is selected by sending messages to the class

[[[language=bash
$ pharo Pharo.image eval "10 factorial"
3628800
]]]


${slide:title=The Command-Line Handler}$

[[[
CommandLineHandler class >> isResponsibleFor: arguments
   ^ arguments includesSubCommand: self commandName

EvaluateCommandLineHandler class >> commandName
   ^ 'eval'

CommandLineHandler class >> allHandlers
   ^ self allSubclasses
      reject: [ :handler| handler isAbstract ]

CommandLineHandler class >> handlersFor: arguments
   ^ self allHandlers
      select: [ :handlerClass |
         handlerClass isResponsibleFor: arguments ]
]]]



${slide:title=Conclusion}$

- When classes are objects and can be sent messages, they are powerful
- Make simple design, stay simple
- In Pharo, method lookup is exactly the same as for all objects:
-- go to the class of the receiver 
-- follow inheritance chain


% Local Variables:
% compile-command: "cd ../.. && ./compile.sh --to=Beamer Slides/Week4/C019-W4S06-ClassMethodsAtWork.pillar"
% End:
