{
    "title":"Thinking about Names and Access",
    "slidesid":"From the Design Corner"
}


${slide:title=Outline}$

- About accessors
- About names

${slide:title=Accessors}$

Some schools promote: "Access instance variables using methods"
- Promote late bound structure
- Subclasses may easily change structure
- Good way to support lazy initialization (see after)
- Be consistent: do not mix accessors and direct use inside the class


${slide:title=Concerns}$

- Protected accessors not private ones (think about class dual interfaces)
- For simple classes, you may double the API
- With current refactoring you can abstract an attribute really fast

${slide:title=Lazy initialization}$

[[[
Scheduler >> tasks
	^ tasks ifNil: [ task := OrderedCollection new ] 
]]]

${slide:title=Public accessor and copy}$

- Using a public accessor may break encapsulation
- What about returning a copy of the accessed object

[[[
Scheduler >> tasks
	^ tasks copy 
]]]

${slide:title=Clients can be confused}$

- I can get access to the state but if I modify it nothing changes!
- I can get access to the state but it can be desynchronised from the internal values

${slide:title=Communicate between with the client}$

[[[
Scheduler >> copiedTasks
	^ tasks copy 
]]]

This way the client knows that he gets a copy


${slide:title=Reading code}$

- You will read code others wrote
- You will read code that your wrote and forgot
- Use good names copiedTasks 

${slide:title=About instance variable names}$

Use role that they play to name your variables

[[[
RBValueNode subclass: #RBBlockNode
	instanceVariableNames: 'left right colons arguments bar body scope'
]]]

[[[
RBValueNode subclass: #RBBlockNode
	instanceVariableNames: 'leftPosition rightPosition colons arguments barPosition body scope'
]]]

${slide:title=About method argument names}$

In dynamically typed language, use typing information

[[[
printOn: aStream
]]]

vs. 

[[[
printOn: s
]]]

${slide:title=Conclusion}$

- Communication and names are key in good code

