{
    "title":"Notes for me",
    "slidesid":"From the Design Corner"
}


${slide:title=More natural case}$

[[[
class A {void m(A a) { println("A.m(A)"); }}
class B extends A {
	void m(B b) { println("B.m(B)"); } 
	void m(A a) { println("B.m(A)"); }}
B b = new B(); A a = b;
]]]

In which cases will B.m(B) be called?
[[[
a.m(a);
a.m(b);
b.m(a);
b.m(b);
]]]

${slide:title=More natural case}$

[[[
class A {void m(A a) { println("A.m(A)"); }}
class B extends A {
	void m(B b) { println("B.m(B)"); } 
	void m(A a) { println("B.m(A)"); }}
B b = new B(); A a = b;
]]]

In which cases will B.m(B) be called?
[[[
a.m(a);       B.m(A)
a.m(b);       B.m(A)
b.m(a);       B.m(A)
b.m(b);       B.m(B)
]]]

${slide:title=More natural case: a.m(a)}$

[[[
class A {void m(A a) { println("A.m(A)"); }}
class B extends A {
	void m(B b) { println("B.m(B)"); } 
	void m(A a) { println("B.m(A)"); }}
B b = new B(); A a = b;
]]]

- Step 1: we only look in A
- Step 2: there is a method m
- Step 3: static type of a matches A: we will be looking for m(A a)

The dynamic type of a is B
- the lookup starts in class B and looks for “m(A a)”
> B.m(A)

${slide:title=More natural case: a.m(b)}$

[[[
class A {void m(A a) { println("A.m(A)"); }}
class B extends A {
	void m(B b) { println("B.m(B)"); } 
	void m(A a) { println("B.m(A)"); }}
B b = new B(); A a = b;
]]]

- Step 1: We look only in A
- Step 2: there is a method m
- Step 3: static type of b matches A since B is a subtype of A: We will be looking for “m(A a)”

The dynamic type of a is B
- the lookup starts in class B and looks for “m(A a)”
> B.m(A)

${slide:title=More natural case: b.m(a)}$

[[[
class A {void m(A a) { println("A.m(A)"); }}
class B extends A {
	void m(B b) { println("B.m(B)"); } 
	void m(A a) { println("B.m(A)"); }}
B b = new B(); A a = b;
]]]

- Step 1: We look in B and its superclass A
- Step 2: there are two methods mA and mB
- Step 3: static type of a is A: We will be looking for “m(A a)”

The dynamic type of b is B
- the lookup starts in class B and looks for “m(A a)”
“B.m(A)”

${slide:title=More natural case: b.m(a)}$

[[[
class A {void m(A a) { println("A.m(A)"); }}
class B extends A {
	void m(B b) { println("B.m(B)"); } 
	void m(A a) { println("B.m(A)"); }}
B b = new B(); A a = b;
]]]

- Step 1: We look in B and its superclass A
- Step 2: there are two methods mA and mB
- Step 3: static type of a is A: We will be looking for “m(A a)”

The dynamic type of b is B
- the lookup starts in class B and looks for “m(A a)”
“B.m(A)”


${slide:title=More natural case: b.m(b)}$

[[[
class A {void m(A a) { println("A.m(A)"); }}
class B extends A {
	void m(B b) { println("B.m(B)"); } 
	void m(A a) { println("B.m(A)"); }}
B b = new B(); A a = b;
]]]

- Step 1: We look in B and its superclass A
- Step 2: there are two methods mA and mB
- Step 3: The static type of b is B: We will be looking for “m(B b)”

The dynamic type of b is B
- the lookup starts in class B and looks for “m(B b)”
>B.m(B)
